[gd_scene load_steps=12 format=3 uid="uid://bj67pe0dynrrv"]

[ext_resource type="Script" uid="uid://bsxy6s4tdxebg" path="res://fox/components/review/ask-for-review.gd" id="1_apqeu"]
[ext_resource type="PackedScene" uid="uid://7qqtdv7ky8f5" path="res://fox/components/blur.tscn" id="2_xfdfm"]
[ext_resource type="Theme" uid="uid://b2i8gu5fcqb0u" path="res://assets/resources/theme.tres" id="3_jboxj"]
[ext_resource type="Texture2D" uid="uid://cpkmf6vqfvy03" path="res://assets/sprites/gui/logo.webp" id="4_en82v"]
[ext_resource type="Texture2D" uid="uid://c5chklvwjmdwo" path="res://assets/sprites/gui/buttons/button-green.webp" id="5_cbnxi"]
[ext_resource type="Texture2D" uid="uid://dkjigasbdj0yg" path="res://assets/sprites/gui/buttons/cross.webp" id="5_jinkx"]
[ext_resource type="Texture2D" uid="uid://6jnsybiu5cft" path="res://assets/sprites/gui/buttons/button-green-pressed.webp" id="6_1s1cy"]
[ext_resource type="Script" uid="uid://dxchmnb708xh8" path="res://addons/InappReviewPlugin/InappReview.gd" id="8_f8j5i"]

[sub_resource type="Shader" id="Shader_gni6t"]
code = "shader_type canvas_item;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
// Xor's gausian blur function
// Link: https://xorshaders.weebly.com/tutorials/blur-shaders-5-part-2
// Defaults from: https://www.shadertoy.com/view/Xltfzj
//
// BLUR BLURRINESS (Default 8.0)
// BLUR ITERATIONS (Default 16.0 - More is better but slower)
// BLUR QUALITY (Default 4.0 - More is better but slower)
//
// Desc.: Don't have the best performance but will run on almost
// anything, although, if developing for mobile, is better to use
// 'texture_nodevgaussian(...) instead'.
vec4 texture_xorgaussian(sampler2D tex, vec2 uv, vec2 pixel_size, float blurriness, int iterations, int quality){
	float pi = 6.28;

	vec2 radius = blurriness / (1.0 / pixel_size).xy;
	vec4 blurred_tex = texture(tex, uv);

	for(float d = 0.0; d < pi; d += pi / float(iterations)){
		for( float i = 1.0 / float(quality); i <= 1.0; i += 1.0 / float(quality) ){
			vec2 directions = uv + vec2(cos(d), sin(d)) * radius * i;
			blurred_tex += texture(tex, directions);
		}
	}
	blurred_tex /= float(quality) * float(iterations) + 1.0;

	return blurred_tex;
}

// Experience-Monks' fast gaussian blur function
// Link: https://github.com/Experience-Monks/glsl-fast-gaussian-blur/
//
// BLUR ITERATIONS (Default 16.0 - More is better but slower)
// BLUR DIRECTION (Direction in which the blur is apllied, use vec2(1, 0) for first pass and vec2(0, 1) for second pass)
//
// Desc.: ACTUALLY PRETTY SLOW but still pretty good for custom cinematic
// bloom effects, since this needs render 2 passes
vec4 texture_monksgaussian_multipass(sampler2D tex, vec2 uv, vec2 pixel_size, int iterations, vec2 direction){
	vec4 blurred_tex = vec4(0.0);
	vec2 resolution = 1.0 / pixel_size;

	for (int i=0; i < iterations; i++){
		float size = float(iterations - i);

		vec2 off1 = vec2(1.3846153846) * (direction * size);
		vec2 off2 = vec2(3.2307692308) * (direction * size);

		blurred_tex += texture(tex, uv) * 0.2270270270;
		blurred_tex += texture(tex, uv + (off1 / resolution)) * 0.3162162162;
		blurred_tex += texture(tex, uv - (off1 / resolution)) * 0.3162162162;
		blurred_tex += texture(tex, uv + (off2 / resolution)) * 0.0702702703;
		blurred_tex += texture(tex, uv - (off2 / resolution)) * 0.0702702703;
	}

	blurred_tex /= float(iterations) + 1.0;

	return blurred_tex;
}

// u/_NoDev_'s gaussian blur function
// Discussion Link: https://www.reddit.com/r/godot/comments/klgfo9/help_with_shaders_in_gles2/
// Code Link: https://postimg.cc/7JDJw80d
//
// BLUR BLURRINESS (Default 8.0 - More is better but slower)
// BLUR RADIUS (Default 1.5)
// BLUR DIRECTION (Direction in which the blur is apllied, use vec2(1, 0) for first pass and vec2(0, 1) for second pass)
//
// Desc.: Really fast and GOOD FOR MOST CASES, but might NOT RUN IN THE WEB!
// use 'texture_xorgaussian' instead if you found any issues.
vec4 texture_nodevgaussian_singlepass(sampler2D tex, vec2 uv, vec2 pixel_size, float blurriness, float radius){
	float pi = 3.14;
	float n = 0.0015;

	vec4 blurred_tex = vec4(0);

	float weight;
	for (float i = -blurriness; i <= blurriness; i++){
		float d = i / pi;
		vec2 anchor = vec2(cos(d), sin(d)) * radius * i;
		vec2 directions = uv + pixel_size * anchor;
		blurred_tex += texture(tex, directions) * n;
		if (i <= 0.0) {n += 0.0015; }
		if (i > 0.0) {n -= 0.0015; }
		weight += n;
	}

	float norm = 1.0 / weight;
	blurred_tex *= norm;
	return blurred_tex;
}
vec4 texture_nodevgaussian_multipass(sampler2D tex, vec2 uv, vec2 pixel_size, float blurriness, vec2 direction){
	float n = 0.0015;

	vec4 blurred_tex = vec4(0);

	float weight;
	for (float i = -blurriness; i <= blurriness; i++){
		vec2 directions = uv + pixel_size * (direction * i);
		blurred_tex += texture(tex, directions) * n;
		if (i <= 0.0) {n += 0.0015; }
		if (i > 0.0) {n -= 0.0015; }
		weight += n;
	}

	float norm = 1.0 / weight;
	blurred_tex *= norm;
	return blurred_tex;
}

//  -- EXAMPLE CODE -- //
uniform int blur_type = 0;
uniform int blur_amount = 16;
uniform float blur_radius = 1;
uniform vec2 blur_direction = vec2(1, 1);
void fragment(){
	vec2 uv = FRAGCOORD.xy / (1.0 / SCREEN_PIXEL_SIZE).xy;

	if (blur_type == 0)
	{
		vec4 xorgaussian = texture_xorgaussian(SCREEN_TEXTURE, uv, SCREEN_PIXEL_SIZE, float(blur_amount), 16, 4);
		COLOR =  xorgaussian;
	}
	else if (blur_type == 1)
	{
		vec4 monksgaussian_multipass = texture_monksgaussian_multipass(SCREEN_TEXTURE, uv, SCREEN_PIXEL_SIZE, blur_amount, blur_direction);
		COLOR =  monksgaussian_multipass;
	}
	else if (blur_type == 2)
	{
		vec4 nodevgaussian_singlepass = texture_nodevgaussian_singlepass(SCREEN_TEXTURE, uv, SCREEN_PIXEL_SIZE, float(blur_amount), blur_radius);
		COLOR =  nodevgaussian_singlepass;
	}
	else if (blur_type == 3)
	{
		vec4 nodevgaussian_multipass = texture_nodevgaussian_multipass(SCREEN_TEXTURE, uv, SCREEN_PIXEL_SIZE, float(blur_amount), blur_direction);
		COLOR =  nodevgaussian_multipass;
	}
	else
	{
		COLOR =  texture(SCREEN_TEXTURE, uv);
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7235k"]
resource_local_to_scene = true
shader = SubResource("Shader_gni6t")
shader_parameter/blur_type = 0
shader_parameter/blur_amount = 27
shader_parameter/blur_radius = 1.0
shader_parameter/blur_direction = Vector2(1, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_tvelv"]
bg_color = Color(1, 1, 1, 0.619608)
border_width_left = 12
border_width_top = 12
border_width_right = 12
border_width_bottom = 12
border_color = Color(1, 1, 1, 1)
corner_radius_top_left = 60
corner_radius_top_right = 60
corner_radius_bottom_right = 60
corner_radius_bottom_left = 60

[node name="askForReview" type="ReferenceRect"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_vertical = 8
script = ExtResource("1_apqeu")

[node name="blur" parent="." instance=ExtResource("2_xfdfm")]
material = SubResource("ShaderMaterial_7235k")
layout_mode = 1
grow_horizontal = 2
grow_vertical = 2
metadata/_edit_lock_ = true

[node name="panel" type="Panel" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -429.0
offset_top = -730.0
offset_right = 431.0
offset_bottom = 51.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme = ExtResource("3_jboxj")
theme_override_styles/panel = SubResource("StyleBoxFlat_tvelv")

[node name="logo" type="TextureRect" parent="panel"]
layout_mode = 0
offset_left = -65.0
offset_top = -118.0
offset_right = 917.0
offset_bottom = 864.0
scale = Vector2(0.23, 0.23)
texture = ExtResource("4_en82v")

[node name="text" type="Label" parent="panel"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -392.0
offset_top = -345.5
offset_right = 404.0
offset_bottom = 335.5
grow_horizontal = 2
grow_vertical = 2
pivot_offset = Vector2(499, 245)
theme = ExtResource("3_jboxj")
theme_override_colors/font_color = Color(1, 1, 1, 1)
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 11
theme_override_constants/line_spacing = -59
theme_override_font_sizes/font_size = 80
text = "Enjoying the game?
We need your support!

Your feedback and ratings help us improve and be visible.

Please take a moment to give 5 stars!"
horizontal_alignment = 1
autowrap_mode = 2

[node name="closeButton" type="TextureButton" parent="panel"]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -61.0
offset_top = -9.0
offset_right = 65.0
offset_bottom = 108.0
grow_horizontal = 0
scale = Vector2(0.6, 0.6)
mouse_default_cursor_shape = 2
texture_normal = ExtResource("5_jinkx")
ignore_texture_size = true
stretch_mode = 0

[node name="rateButton" type="TextureButton" parent="panel"]
layout_mode = 1
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -232.0
offset_top = -46.0
offset_right = 481.0
offset_bottom = 215.0
grow_horizontal = 2
grow_vertical = 0
scale = Vector2(0.7, 0.7)
mouse_default_cursor_shape = 2
texture_normal = ExtResource("5_cbnxi")
texture_pressed = ExtResource("6_1s1cy")
texture_hover = ExtResource("6_1s1cy")
stretch_mode = 0

[node name="label" type="Label" parent="panel/rateButton"]
layout_mode = 1
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -93.6428
offset_top = -225.286
offset_right = 81.3572
offset_bottom = -51.2857
grow_horizontal = 2
grow_vertical = 0
theme = ExtResource("3_jboxj")
theme_override_colors/font_color = Color(0.95158, 0.95158, 0.95158, 1)
theme_override_font_sizes/font_size = 90
text = "-"
horizontal_alignment = 1
vertical_alignment = 1

[node name="iOSReview" type="Node" parent="."]
script = ExtResource("8_f8j5i")
